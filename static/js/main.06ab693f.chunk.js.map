{"version":3,"sources":["components/header.js","components/SpinningCone.jsx","App.js","index.js"],"names":["Header","props","useState","checked","setChecked","className","action","type","id","name","placeholder","coneParams","onChange","e","value","isNaN","target","valueAsNumber","setConeParams","radius","console","log","height","rotate","SpinningCone","position","color","args","mesh","useRef","useFrame","current","rotation","x","y","expand","useSpring","scale","ref","onPointerDown","Math","floor","random","toString","castShadow","attach","factor","softShadows","App","style","outline","border","colorManagement","shadowMap","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","PI","receiveShadow","opacity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06ab693f.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nconst Header = (props) => {\n\n  const [checked, setChecked] = useState(true)\n\n  function handleRotateChange () {\n    props.setConeParams({...props.coneParams, rotate: !props.coneParams['rotate']})\n    setChecked(!checked)\n  }\n\n  return (\n    <header>\n      <div className='logo'>\n        <span>ROTATING CONE</span>\n      </div>\n      <div className=\"header__form-wrapper\">\n        <form action=\"#\" >\n          <label>radius:</label>\n          <input type=\"number\" id=\"radius\" name=\"radius\" placeholder={props.coneParams['radius']}\n            // value={props.coneParams['radius']}\n            onChange={e => {\n              const value = isNaN(e.target.valueAsNumber) ? props.coneParams['radius'] : e.target.valueAsNumber;\n              props.setConeParams({...props.coneParams, radius: value})\n            }}\n          />\n          <label>height:</label>\n          <input type=\"number\" id=\"height\" name=\"height\" placeholder={props.coneParams['height']}\n            // value={props.coneParams['height']}\n            // value={value}\n            onChange={e => {\n              if(isNaN(e.target.valueAsNumber)) console.log(e.target.valueAsNumber)\n              const value = isNaN(e.target.valueAsNumber) ? props.coneParams['height'] : e.target.valueAsNumber;\n              props.setConeParams({...props.coneParams, height: value})\n            }\n             } />\n          {/* <input type=\"submit\" onClick={e => handleFormSubmit(e)} value=\"Rotate\" /> */}\n          <span className=\"labelRotate\">rotate:</span>\n          <label className=\"switch\">\n            \n            <input type=\"checkbox\" checked={checked} onChange={handleRotateChange}/>\n            <span className=\"slider round\"></span>\n          </label>\n        </form >\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, {useState, useRef} from 'react'\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport { MeshWobbleMaterial} from \"drei\";\r\nimport { useSpring, a } from \"react-spring/three\";\r\n\r\n\r\nexport default function SpinningCone({coneParams, position, color, setConeParams, args, rotate }) {\r\n  //ref to target the mesh\r\n  const mesh = useRef();\r\n\r\n  //useFrame allows us to re-render/update rotation on each frame\r\n  useFrame(() => {if(rotate) (mesh.current.rotation.x = mesh.current.rotation.y += 0.01)});\r\n\r\n  //Basic expand state\r\n  const [expand, setExpand] = useState(false);\r\n  // React spring expand animation\r\n  const props = useSpring({\r\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\r\n  });\r\n    return (\r\n        <a.mesh\r\n        position={position}\r\n        ref={mesh}\r\n        // onClick={() => {\r\n        //   setConeParams({...coneParams, color: '#' + Math.floor(Math.random()*16777215).toString(16)})\r\n        //   // setExpand(!expand)\r\n        // }}\r\n        onPointerDown ={\r\n            () => {\r\n                setConeParams({...coneParams, color: '#' + Math.floor(Math.random()*16777215).toString(16)})\r\n                // setExpand(!expand)\r\n              }\r\n        }\r\n        scale={props.scale}\r\n        castShadow>\r\n        <coneBufferGeometry attach='geometry' args={args} />\r\n        <MeshWobbleMaterial\r\n          color={color}\r\n          attach='material'\r\n          factor={0.6}\r\n        />\r\n      </a.mesh>\r\n  )\r\n}\r\n","import React, {useState} from \"react\";\n//R3F\nimport { Canvas} from \"react-three-fiber\";\n// Deai - R3F\nimport { softShadows, OrbitControls } from \"drei\";\n//Components\nimport Header from \"./components/header\";\n// Styles\nimport \"./App.scss\";\nimport SpinningCone from \"./components/SpinningCone\";\n\n// soft Shadows\nsoftShadows();\n\nconst App = () => {\n\n  const [coneParams, setConeParams] = useState({radius: 1, height: 3, color: 'pink', rotate: true})\n\n  return (\n    <>\n      <Header  coneParams={coneParams} setConeParams={setConeParams}/>\n      <div className=\"canvas-wrapper\">\n      <Canvas\n        className=\"canvas\"\n        style={{height:\"100%\", outline: \"none !important\", border: \"none !important\"}}\n        colorManagement\n        shadowMap\n        camera={{ position: [6, 2, -6], fov: 60 }}\n      >\n        <ambientLight intensity={0.3} />\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        <group>\n          <mesh\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, - coneParams['height'], 0]}\n            receiveShadow>\n            <planeBufferGeometry attach='geometry' args={[1000, 1000]} />\n            <shadowMaterial attach='material' opacity={0.25} />\n          </mesh>\n          <SpinningCone position={[0,0, 0]} coneParams={coneParams} color={coneParams['color']} setConeParams={setConeParams} args={[coneParams['radius'], coneParams['height']]} rotate={coneParams['rotate']}/>\n        </group>\n        <OrbitControls />\n      </Canvas>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n"],"sourceRoot":""}